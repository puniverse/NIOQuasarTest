apply plugin: 'java'

sourceCompatibility = '1.8'
[compileJava, compileTestJava]*.options*.encoding = 'UTF-8'

ext.quasarVersion = '0.5.0'
ext.comsatVersion = '0.1.1'


if (!hasProperty('mainClass')) {
    ext.mainClass = ''
}

repositories {
    mavenCentral()
}
configurations {
    quasar
}

dependencies {
    compile "co.paralleluniverse:quasar-core:$quasarVersion"
    compile "co.paralleluniverse:comsat-jax-rs-client:$comsatVersion"
    quasar "co.paralleluniverse:quasar-core:$quasarVersion"
}

tasks.withType(JavaExec) {
    jvmArgs "-XX:+UnlockCommercialFeatures"
    jvmArgs "-XX:+FlightRecorder"    
    jvmArgs "-javaagent:${configurations.quasar.iterator().next()}";
    classpath = sourceSets.main.runtimeClasspath   
}

task(runQuasarTP, dependsOn: 'classes', type: JavaExec) {
    main = 'co.paralleluniverse.quasartkb.MainIO2'
    systemProperty "co.paralleluniverse.useFJ", "false"
    jvmArgs "-XX:StartFlightRecording=duration=20s,filename=runQuasarTP.jfr"    
}
task(runQuasarFJ, dependsOn: 'classes', type: JavaExec) {
    main = 'co.paralleluniverse.quasartkb.MainIO2'
    systemProperty "co.paralleluniverse.useFJ", "true"
    jvmArgs "-XX:StartFlightRecording=duration=20s,filename=runQuasarFJ.jfr"    
}
task(runAsyncServer, dependsOn: 'classes', type: JavaExec) {
    main = 'co.paralleluniverse.quasartkb.AsyncServer'
    jvmArgs "-XX:StartFlightRecording=duration=20s,filename=runAsyncServer.jfr"    
}
task(runClients, dependsOn: 'classes', type: JavaExec) {
    main = 'co.paralleluniverse.quasartkb.ClientTesters'
}
defaultTasks 'runQuasarTP'

