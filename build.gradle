apply plugin: 'java'

sourceCompatibility = '1.8'
[compileJava, compileTestJava]*.options*.encoding = 'UTF-8'

ext.quasarVersion = '0.6.0-SNAPSHOT:jdk8'
ext.comsatVersion = '0.1.1'


if (!hasProperty('mainClass')) {
    ext.mainClass = 'co.paralleluniverse.quasartkb.MainIO'
}

repositories {
    mavenLocal()
    mavenCentral()
    maven { url "https://oss.sonatype.org/content/repositories/snapshots" }
}
configurations {
    quasar
}

dependencies {
    compile "co.paralleluniverse:quasar-core:$quasarVersion"
    compile "co.paralleluniverse:comsat-jax-rs-client:$comsatVersion"
    quasar "co.paralleluniverse:quasar-core:$quasarVersion"
}

tasks.withType(JavaExec) {
//    jvmArgs "-XX:+UnlockCommercialFeatures"
//    jvmArgs "-XX:+FlightRecorder"    
//    jvmArgs "-XX:FlightRecorderOptions=settings=profile.jfc"
//    jvmArgs "-XX:StartFlightRecording=duration=20s,filename="+name+".jfr"    

    jvmArgs "-javaagent:${configurations.quasar.iterator().next()}";
    classpath = sourceSets.main.runtimeClasspath
    // systemProperty "sun.nio.ch.internalThreadPoolSize", "2"
    
    // debugging
    // jvmArgs '-ea'
    // systemProperty 'co.paralleluniverse.fibers.verifyInstrumentation', 'true'
}

task(run, dependsOn: 'classes', type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    if(project.hasProperty('args')){
        args project.args.split('\\s+')
    }
    if(project.hasProperty('mainClass')){
        main = project.mainClass
    }
}

task(run1, dependsOn: 'classes', type: JavaExec) {
    main = 'co.paralleluniverse.quasartkb.MainIO'
}

task(run2, dependsOn: 'classes', type: JavaExec) {
    main = 'co.paralleluniverse.quasartkb.MainIO1'
}

task(runQuasar, dependsOn: 'classes', type: JavaExec) {
    main = 'co.paralleluniverse.quasartkb.MainIO2'
    systemProperty "co.paralleluniverse.scheduler", "xxxx"
}
task(runQuasarTP, dependsOn: 'classes', type: JavaExec) {
    main = 'co.paralleluniverse.quasartkb.MainIO2'
    systemProperty "co.paralleluniverse.scheduler", "tp"
}
task(runQuasarFJ, dependsOn: 'classes', type: JavaExec) {
    main = 'co.paralleluniverse.quasartkb.MainIO2'
    systemProperty "co.paralleluniverse.scheduler", "fj"
}
task(runQuasarIO1, dependsOn: 'classes', type: JavaExec) {
    main = 'co.paralleluniverse.quasartkb.MainIO2'
    systemProperty "co.paralleluniverse.scheduler", "io1"
}
task(runQuasarIO2, dependsOn: 'classes', type: JavaExec) {
    main = 'co.paralleluniverse.quasartkb.MainIO2'
    systemProperty "co.paralleluniverse.scheduler", "io2"
}
task(runQuasarFJ2, dependsOn: 'classes', type: JavaExec) {
    main = 'co.paralleluniverse.quasartkb.MainIO2'
    systemProperty "co.paralleluniverse.scheduler", "fj2"
}
task(runQuasarFJ3, dependsOn: 'classes', type: JavaExec) {
    main = 'co.paralleluniverse.quasartkb.MainIO2'
    systemProperty "co.paralleluniverse.scheduler", "fj3"
}
task(runQuasarFJ4, dependsOn: 'classes', type: JavaExec) {
    main = 'co.paralleluniverse.quasartkb.MainIO2'
    systemProperty "co.paralleluniverse.scheduler", "fj4"
}
task(runAsyncServerTP, dependsOn: 'classes', type: JavaExec) {
    main = 'co.paralleluniverse.quasartkb.AsyncServer'
    systemProperty "co.paralleluniverse.asyncChannelGroup", "tp"
}
task(runAsyncServerCached, dependsOn: 'classes', type: JavaExec) {
    main = 'co.paralleluniverse.quasartkb.AsyncServer'
    systemProperty "co.paralleluniverse.asyncChannelGroup", "cached"
}
task(runAsyncServerFixed, dependsOn: 'classes', type: JavaExec) {
    main = 'co.paralleluniverse.quasartkb.AsyncServer'
    systemProperty "co.paralleluniverse.asyncChannelGroup", "fixed"
}
task(runAsyncServerExecutor, dependsOn: 'classes', type: JavaExec) {
    main = 'co.paralleluniverse.quasartkb.AsyncServer'
    systemProperty "co.paralleluniverse.asyncChannelGroup", "executor"
}
task(runClients, dependsOn: 'classes', type: JavaExec) {
    main = 'co.paralleluniverse.quasartkb.ClientTesters'
}

defaultTasks 'run'

